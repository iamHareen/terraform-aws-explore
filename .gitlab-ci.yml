stages:
  # - terraform-init
  - build
  - push
  - deploy

variables:
  IMAGE_TAG: "latest"
  IMAGE_NAME: "my-app-gtn"
  ECR_URL: "621095508488.dkr.ecr.us-east-1.amazonaws.com/hareen-repo-dev"

Step 1: Initialize Terraform and apply changes
terraform-init:
  stage: terraform-init
  image:
    name: hashicorp/terraform:1.0.0
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - echo "Setting AWS environment variables..."
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_REGION="$AWS_REGION"
    - cd terraform
  script:
    - echo "Initializing Terraform..."
    - terraform init
    - echo "Applying Terraform..."
    - terraform apply -auto-approve
    - terraform output -json > ../terraform_output.json
  artifacts:
    paths:
      - terraform_output.json
    expire_in: 1 hour
  allow_failure: true
    

# Step 2: Build Docker image
build-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Building Docker image from $(pwd)"
    - ls -R app/  # Debug directory structuree
    - docker build -t "$IMAGE_NAME:$IMAGE_TAG" -f app/Dockerfile .
    - docker images
    # Save image as a tar file to pass between jobs
    - mkdir -p image
    - docker save "$IMAGE_NAME:$IMAGE_TAG" > image/docker-image.tar
  artifacts:
    paths:
      - image/docker-image.tar
    expire_in: 1 hour

# Step 3: Push to ECR
# push:
#   stage: push
#   image: docker:latest
#   services:
#     - docker:dind
#   # dependencies:
#   #   - terraform-init
#   #   - build-image  # Corrected the dependency name to 'build-image'
#   before_script:
#     - apk add --no-cache jq
#     - export ECR_REPO=$(jq -r .ecr_repository_name.value tf_outputs.json)
#     - export ECR_URL=$(jq -r .ecr_repository_url.value tf_outputs.json)
#     - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL
#   script:
#     - docker load < image/docker-image.tar
#     - docker tag $ECR_REPO:latest $ECR_URL:latest
#     - docker push $ECR_URL:latest

# Step 3: Push to ECR
push-image-to-ecr:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache aws-cli
    - docker load < image/docker-image.tar
    - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
    - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
    - aws configure set default.region "$AWS_REGION"
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 621095508488.dkr.ecr.us-east-1.amazonaws.com
  script:
    - docker tag "$IMAGE_NAME:$IMAGE_TAG" "$ECR_URL:$IMAGE_TAG"
    - docker push "$ECR_URL:$IMAGE_TAG"

# Step 4: Deploy to ECS
deploy:
  stage: deploy
  image: amazon/aws-cli:latest
  # dependencies:
  #   - terraform-init
  before_script:
    - apk add --no-cache jq
    - export CLUSTER_NAME=$(jq -r .ecs_cluster_name.value tf_outputs.json)
    - export SERVICE_NAME=$(jq -r .ecs_service_name.value tf_outputs.json)
  script:
    - echo "Deploying latest image to ECS..."
    - aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --force-new-deployment --region "$AWS_REGION"
  only:
    - main
    - deployment
